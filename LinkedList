public class MLinkedList {
    Node head =null,tail;  
      int size =0;
      
      public boolean IsEmpty(){
         return size <= 0; 
      }
public void AddFirst(int x){
Node curr = new Node (x);
    if(size==0 || head==null){
            head=tail= curr;
    }
    else if( size>0 || head !=null){
//        curr.data= x;
        curr.next = head;
        head =curr;      
    }
    size++;
}
    public void AddLast (int x){
        Node curr= new Node (x);
        if(size==0|| head ==null){
            head=tail= curr;
        }
        else{
            tail.next= curr;
            tail =curr; 
        }
        size++;
    }

    public void Sort(){
        Node p= head,q=head, min=p;
        while(p!=null){
            while(q!= null){
                if(q.data<min.data){
                    min=q;
                }
                q=q.next;
            }
            p.next=min.next;
            min.next=p;
            p=p.next;
            q=min=p;
        }
    }
    
    public void InsertInSort(int value){
        Node cur= head,p=new Node (value);
        if(  head==null || head.data>value){
            p.next=head;
            head=p;
        }
        else{
while(cur.next!= null && cur.next.data <value){
    cur= cur.next;
}   
p.next=cur.next;
cur.next=p;
        }
    }
    
    public void recesiveprint(Node head){
        if(head==null)return;
       System.out.print(head.data + " ");
       recesiveprint(head.next);

    }
    public void Insert ( int pos,int value){
        Node p=new Node(value);
        if(pos==1){
            p.next=head;
            head=p;
        }
        else if( pos>1){
            Node cur=head;
           for(int i=1;i<pos-1&& cur!=null;i++) cur=cur.next;
           if(cur!=null){
             p.next= cur.next ;
               cur.next=p;
               
           }
            
        }
    }
    
    
    
    
            public void AddByIndx(int index,int value){ 
                Node temp =new Node(value);
                if(IsEmpty()|| index==1)AddFirst(value);
                if(index <1|| index> size+1)System.out.println(" invalid !!!");
                else{
                    Node curr= head;
                    while(index-- !=0 ){
                        if(index ==1){
                            temp.next=curr.next;
                            curr.next=temp;
                            size++;
                            break;
                        }
                        curr=curr.next;
                    }}}
            
            public Node recsearch(int value,Node p){
              //  if(head.data==value)return p;
            if(p==null)return null;
            if(p.data ==value)return p;
            return recsearch(value,p.next);
            }
            
            public Node Lsearch(int value){
                Node cur=head; Node q=head;
                if(head.data ==value)return cur
                        
                        
                        ;
                else{
                while(cur!=null){
                    if(cur.data==value){
                        q.next=cur.next;
                        cur.next=head;
                        head=cur;
                        return cur;
                    }
                    q=cur;
                    cur=cur.next;
                }  
                return null;}

            }
            
         public int  contain(int value){
        if(size==0)return -1;
         else {
            Node curr= head; int c=0;
                    while(curr!=null){
                        if(curr.data==value) { return c; } 
                        curr=curr.next;c++;
                        }
              return -1;
               }
        }
                    
               public int printMid(Node head){
//                   if(head==null) return -1;
//                  else if(head==tail|| tail==head.next)return tail.data;
//                   else{
                   Node slow=head,fast=head;
                   while(fast!=null&&fast.next!=null){
                       fast=fast.next.next;
                       slow=slow.next;
                   }
                   return slow.data;
               }   
              
        public  void RemoveFirst(){
            head= head.next;
        }         
       public  void RemoveLast(){
           Node cur= head;
           while(cur.next!= tail){
               cur=cur.next;
           }
           tail=cur;
           cur.next=null;
       }
   
      public void rotaionL(){
          if(size<2)return ;
          else{
          Node cur=head;
          while (cur.next.next!=null){cur=cur.next;}
            tail.next=head;
             head=tail;
             tail=cur;
            cur.next=null;
          }
      }       
      public void RemoveByIndex(int index){
         if(index <1|| index>size)return;
         if(index==1)RemoveFirst();
        else if(index ==size)RemoveLast();
         else{
             Node curr=head;
             while(index-- !=0){
                 if(index==1){
                   curr.next=curr.next.next;  
                 }
                 curr=curr.next;
             }
             size--;
         }
          
      }
       
      public Node reverse(Node head){
          Node rev=null, cur=head;
          while(cur!=null){
              Node nxt=cur.next;
              cur.next=rev;
              rev=cur;
              cur=nxt;
          }
          return rev;
      }
      public void rotaionR(){
          if(size<2) return;
          else{
             Node curr= head.next;
              tail.next=head;
              head.next=null;
              tail=head;
            head=curr;

          }
          
      }
        public boolean IsSorted(){
            if(head==null || head.next==null) return false;
            else{ // 10 -> 20-> 4->40
           Node p= head,q=p; int mn= head.data; boolean d=true,a=true;
                while(p!= null){
                if(p.data <mn ) {a=false;}
                if(p.data > mn ){ d=false;}
           
                mn=p.data;
                p=p.next;
                }
                if(a==false && d==false)return false;
                if(a==true){System.out.println(" It's ace!!");
                return true;}
                else if(d==true){System.out.println("it's decc!!");
                return true;}
                
                }
              return true;
            
        }
           public Node InsertI( int position, int data){
//          public Node InsertByIndx(Node hradNode, int position,int data) {
        Node headNode =head ;
        if (position < 1) System.out.print("Invalid position");
        // if position is 1 then new node is
        // set infornt of head node
        // head node is changing.
        if (position == 1 || IsEmpty()) { AddFirst(data);
//            Node newNode = new Node(data);
//            newNode.next = headNode;
//            head = newNode;
        } else {
            while (position-- != 0) {
                if (position == 1) {
                    // adding Node at required position
                    Node newNode = new Node (data);
 
                    // Making the new Node to point to
                    // the old Node at the same position
                    newNode.next = headNode.next;
 
                    // Replacing current with new Node
                    // to the old Node to point to the new Node
                    headNode.next = newNode;
                    break;
                }
                headNode = headNode.next;
            }
            if (position != 1)
                System.out.print("Position out of range");
        }
        return head;
    }

          
                  
            
            
            
            
            
            
            
            
            
            
            
            
            
//            if(IsEmpty ())AddFirst(value);
//            else{
//                Node pre= head, curr= head.next, temp= new Node(value);
//                
//                int count =0;
//                while(count > index &&curr!=null){
//                    curr=curr.next;
//                    pre=pre.next;
//                    count++;
//                }
//                pre.next=temp;
//                temp.next=curr;
//
//            }
            
            
            
            
        
        
    
//    public void AddByIndx(int x,int y){
//        Node curr= head.next;Node pre = head,now=new Node(x);int count=2;
//        while(curr!= null){
//            if(y==1) {AddFirst (x); break;}
//            else if(y==size+1){AddLast (x); break;}
//            else if(count==y){
//                now.next=curr;
//                pre.next=now;
//                size++; 
//                break;
//            }
//            else if(y<=0|| y>size+1){System.out.println("ERROE EXCEPTION!!!"); break;}
//                    curr=curr.next;
//                   count++;
//        }
//    }

    public String Tostring(){
       // System.out.println("  jnjnkj");
        String  str="";
        Node curr= this.head;
        while(curr!= null){
            str+= curr.data;
            str+= ", ";
            curr= curr.next;
        }
return str;        
    }
     public void TostringV(){
        Node curr= head;
        while(curr!= null){
System.out.print(curr.data + " ");
            curr= curr.next;
        }
         System.out.println("");
    }
      public int recountnode(Node p){
          int c=0;
    if(p==null)return 0;
    c=recountnode(p.next);
      return c+1;
      //o(n)
      }
      public int resumdata(Node p){
          int x=0;
          if(p==null)return 0;
          x=resumdata(p.next);
          return x+p.data;
      }
    public int sum(Node p){
        if(p==null) return 0;
        return sum(p.next)+p.data;
    }
    public Node Max(Node p){
       Node max=new Node(Integer.MIN_VALUE);
        while(p!=null){
            if(p.data >max.data)   max=p;     
                    p=p.next;
        }
        return max;
    }
    public Node Min(Node p){
        Node min= new Node (Integer.MAX_VALUE);
        while(p!=null){
            if(p.data <min.data)min=p;
            p=p.next;
        }
        return min;
    }
     @Override
    public String toString() {
        String s = "[ ";
        Node curr = head;
        while(curr!=null){
            if(curr==tail)
                s+=curr.data;
            else
                s+=curr.data+", ";
            curr = curr.next;
        }
        return s + " ]";
    }
     public void clear(){
        head=tail=null;
    }

   

    @Override
    public boolean equals(Object obj) {
      MLinkedList x= (MLinkedList)obj; 
       if(this.size!=((MLinkedList)obj).size)
           return false;
       else{
           Node cr=this.head, co=x.head;
        while(cr!= null){
            if(cr.data != co.data)return false;
            cr=cr.next;
            co=co.next;
        }   
    }
        return true;
    }
  
    public Node krotates(Node hrad,int k){
        Node fast=head,slow=head;
       if(head==null)return null;
       if(head==tail)return head; 
       while(fast.next!=null){
           if(k-->0)fast=fast.next;
           else{
               fast=fast.next;
               slow=slow.next;
           }    
       }
       fast.next=head;
       head=slow.next;
       slow.next=null;
       return head;
    }
}
